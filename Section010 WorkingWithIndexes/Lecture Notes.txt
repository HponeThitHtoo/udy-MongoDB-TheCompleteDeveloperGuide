========================
Adding a Single Field Index
========================
> db.contacts.createIndex({"dob.age": 1})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}


=============================
Understanding Index Restrictions
=============================
removing Index
-----------------------
> db.contacts.dropIndex({"dob.age": 1})
{ "nIndexesWas" : 2, "ok" : 1 }


========================
Creating Compound Indexs
========================
> db.contacts.createIndex({gender: 1})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}

*** gender has only two values such as "male" and "female", so indexing is not obviously increase performance

> db.contacts.dropIndex({gender: 1})
{ "nIndexesWas" : 2, "ok" : 1 }

> db.contacts.createIndex({"dob.age": 1, gender: 1})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}

*** when using compound indexes >> index work for both compound indexes and left index alone, but not for right index alone


======================
Using Indexes for Sorting
======================
> db.contacts.explain().find({"dob.age": 35}).sort({gender: 1})

*** indexing is also efficient for sorting for both performance and MongoDB Mega Bite memory size limitation


============================
Understanding the Default Index
============================
> db.contacts.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "contactData.contacts"
        },
        {
                "v" : 2,
                "key" : {
                        "dob.age" : 1,
                        "gender" : 1
                },
                "name" : "dob.age_1_gender_1",
                "ns" : "contactData.contacts"
        }
]

*** _id index is default index


=================
Configuring Indexes
=================
> db.contacts.createIndex({email: 1}, {unique: true})
{
        "ok" : 0,
        "errmsg" : "E11000 duplicate key error collection: contactData.contacts index: email_1 dup key: { email: \"abigail.clark@example.com\" }",
        "code" : 11000,
        "codeName" : "DuplicateKey",
        "keyPattern" : {
                "email" : 1
        },
        "keyValue" : {
                "email" : "abigail.clark@example.com"
        }
}
> db.contacts.find({email: "abigail.clark@example.com"}).count()
2


=========================
Understanding Partial Filters
=========================
> db.contacts.dropIndex({"dob.age": 1, gender: 1})
{ "nIndexesWas" : 2, "ok" : 1 }
> db.contacts.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "contactData.contacts"
        }
]

creating Partial Filter Index
---------------------------------------
> db.contacts.createIndex({"dob.age": 1}, {partialFilterExpression: {gender: "male"}})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}

*** can also partial filter for same field
> db.contacts.createIndex({"dob.age": 1}, {partialFilterExpression: {"dob.age": {$gt: 60}}})


=======================
Applying the Partial Index
=======================
> db.users.insertMany([{name: "Max", email: "max@test.com"}, {name: "Manu"}])
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("5d961d2822e38ccfcd9aca9f"),
                ObjectId("5d961d2822e38ccfcd9acaa0")
        ]
}
> db.users.createIndex({email: 1})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}
> db.users.dropIndex({email: 1})
{ "nIndexesWas" : 2, "ok" : 1 }
> db.users.createIndex({email: 1}, {unique: true})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}

> db.users.insertOne({name: "Anna"})
2019-10-03T22:41:53.716+0630 E  QUERY    [js] WriteError({
        "index" : 0,
        "code" : 11000,
        "errmsg" : "E11000 duplicate key error collection: contactData.users index: email_1 dup key: { email: null }",
        "op" : {
                "_id" : ObjectId("5d961dc922e38ccfcd9acaa1"),
                "name" : "Anna"
        }
}) :
WriteError({
        "index" : 0,
        "code" : 11000,
        "errmsg" : "E11000 duplicate key error collection: contactData.users index: email_1 dup key: { email: null }",
        "op" : {
                "_id" : ObjectId("5d961dc922e38ccfcd9acaa1"),
                "name" : "Anna"
        }
})
WriteError@src/mongo/shell/bulk_api.js:458:48
mergeBatchResults@src/mongo/shell/bulk_api.js:855:49
executeBatch@src/mongo/shell/bulk_api.js:919:13
Bulk/this.execute@src/mongo/shell/bulk_api.js:1163:21
DBCollection.prototype.insertOne@src/mongo/shell/crud_api.js:252:9
@(shell):1:1
*** E11000 duplicate key error >> because document with no email is already exist in collection. So, duplicate key error

if you want to add document with no email without duplicate key error, use partial index
------------------------------------------------------------------------------------------------------------------------------
> db.users.dropIndex({email: 1})
{ "nIndexesWas" : 2, "ok" : 1 }

> db.users.createIndex({email: 1}, {unique: true, partialFilterExpression: {email: {$exists: true}}})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}

*** now you can insert a document with no email without duplication key error
> db.users.insertOne({name: "Anna"})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("5d961ec622e38ccfcd9acaa2")
}


======================================
Understanding the Time -To-Live(TTL) Index
======================================
**** Only work for Date Field
> db.sessions.insertOne({data: "dksafkjel", createdAt: new Date()})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("5d96f96733db68bbc64663f8")
}
> db.sessions.find().pretty()
{
        "_id" : ObjectId("5d96f96733db68bbc64663f8"),
        "data" : "dksafkjel",
        "createdAt" : ISODate("2019-10-04T07:48:55.237Z")
}
> db.sessions.createIndex({createdAt: 1}, {expireAfterSeconds: 10})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}
> db.sessions.find().pretty()
> db.sessions.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "contactData.sessions"
        },
        {
                "v" : 2,
                "key" : {
                        "createdAt" : 1
                },
                "name" : "createdAt_1",
                "ns" : "contactData.sessions",
                "expireAfterSeconds" : 10
        }
]
> db.sessions.find().pretty()
>


==========================
Understanding Covered Qureis
==========================
> db.customers.insertMany([{name: "Max", age: 29, salary: 3000}, {name: "Manu", age: 30, salary: 4000}])
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("5d96fd0233db68bbc64663f9"),
                ObjectId("5d96fd0233db68bbc64663fa")
        ]
}
> db.customers.createIndex({name: 1})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}


> db.customers.explain("executionStats").find({name: "Max"})

db.customers.explain("executionStats").find({name: "Max"}, {_id: 0, name: 1})



==========================
How MongoDB Rejects a Plan
==========================
> db.customers.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "contactData.customers"
        },
        {
                "v" : 2,
                "key" : {
                        "name" : 1
                },
                "name" : "name_1",
                "ns" : "contactData.customers"
        }
]
> db.customers.createIndex({age: 1, name: 1})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 2,
        "numIndexesAfter" : 3,
        "ok" : 1
}


> db.customers.explain().find({name: "Max", age: 30})


======================================
Using Multi-Key Indexes  (indexing for arrays)
======================================
> db.contacts.drop()
true


> db.contacts.insertOne({name: "Max", hobbies: ["Cooking", "Sports"], addresses: [{street: "Main Street"}, {street: "Second Street"}]})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("5d9702b033db68bbc64663fb")
}
> db.contacts.findOne()
{
        "_id" : ObjectId("5d9702b033db68bbc64663fb"),
        "name" : "Max",
        "hobbies" : [
                "Cooking",
                "Sports"
        ],
        "addresses" : [
                {
                        "street" : "Main Street"
                },
                {
                        "street" : "Second Street"
                }
        ]
}


> db.contacts.createIndex({hobbies: 1})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}
> db.contacts.find({hobbies: "Sports"}).pretty()
{
        "_id" : ObjectId("5d9702b033db68bbc64663fb"),
        "name" : "Max",
        "hobbies" : [
                "Cooking",
                "Sports"
        ],
        "addresses" : [
                {
                        "street" : "Main Street"
                },
                {
                        "street" : "Second Street"
                }
        ]
}


> db.contacts.createIndex({addresses: 1})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 2,
        "numIndexesAfter" : 3,
        "ok" : 1
}

> db.contacts.explain("executionStats").find({"addresses.street": "Main Street"})   >> will use collection scan

> db.contacts.explain("executionStats").find({addresses: {street: "Main Street"}}) >> will use index scan


> db.contacts.createIndex({"addresses.street": 1})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 3,
        "numIndexesAfter" : 4,
        "ok" : 1
}


*** Compuound Index with one single index and one multi key index is possible
> db.contacts.createIndex({name: 1, hobbies: 1})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 4,
        "numIndexesAfter" : 5,
        "ok" : 1
}

*** But compound index with two multi key index in not possible
> db.contacts.createIndex({addresses: 1, hobbies: 1})
{
        "ok" : 0,
        "errmsg" : "cannot index parallel arrays [hobbies] [addresses]",
        "code" : 171,
        "codeName" : "CannotIndexParallelArrays"
}


============================================
Understanding Text Indexes  ( for key word finding)
============================================
> db.products.insertMany([{title: "A Book", description: "This is an awesome book about a young artist!"}, {title: "Red T-Shirt", description: "This T-Shirt is red and it's pretty awesome!"}])
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("5d97084e33db68bbc64663fc"),
                ObjectId("5d97084e33db68bbc64663fd")
        ]
}
> db.products.find().pretty()
{
        "_id" : ObjectId("5d97084e33db68bbc64663fc"),
        "title" : "A Book",
        "description" : "This is an awesome book about a young artist!"
}
{
        "_id" : ObjectId("5d97084e33db68bbc64663fd"),
        "title" : "Red T-Shirt",
        "description" : "This T-Shirt is red and it's pretty awesome!"
}


> db.products.createIndex({description: "text"})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}


> db.products.find({$text: {$search: "awesome"}}).pretty()
{
        "_id" : ObjectId("5d97084e33db68bbc64663fc"),
        "title" : "A Book",
        "description" : "This is an awesome book about a young artist!"
}
{
        "_id" : ObjectId("5d97084e33db68bbc64663fd"),
        "title" : "Red T-Shirt",
        "description" : "This T-Shirt is red and it's pretty awesome!"
}


> db.products.find({$text: {$search: "book"}}).pretty()
{
        "_id" : ObjectId("5d97084e33db68bbc64663fc"),
        "title" : "A Book",
        "description" : "This is an awesome book about a young artist!"
}


> db.products.find({$text: {$search: "red book"}}).pretty()
{
        "_id" : ObjectId("5d97084e33db68bbc64663fc"),
        "title" : "A Book",
        "description" : "This is an awesome book about a young artist!"
}
{
        "_id" : ObjectId("5d97084e33db68bbc64663fd"),
        "title" : "Red T-Shirt",
        "description" : "This T-Shirt is red and it's pretty awesome!"
}


> db.products.find({$text: {$search: "\"red book\""}}).pretty()


> db.products.find({$text: {$search: "\"awesome book\""}}).pretty()
{
        "_id" : ObjectId("5d97084e33db68bbc64663fc"),
        "title" : "A Book",
        "description" : "This is an awesome book about a young artist!"
}


===========================
Text Indexes & Sorting
===========================
> db.products.find({$text: {$search: "awesome t-shirt"}}).pretty()
{
        "_id" : ObjectId("5d97084e33db68bbc64663fc"),
        "title" : "A Book",
        "description" : "This is an awesome book about a young artist!"
}
{
        "_id" : ObjectId("5d97084e33db68bbc64663fd"),
        "title" : "Red T-Shirt",
        "description" : "This T-Shirt is red and it's pretty awesome!"
}


> db.products.find({$text: {$search: "awesome t-shirt"}}, {score: {$meta: "textScore"}}).pretty()
{
        "_id" : ObjectId("5d97084e33db68bbc64663fd"),
        "title" : "Red T-Shirt",
        "description" : "This T-Shirt is red and it's pretty awesome!",
        "score" : 1.7999999999999998
}
{
        "_id" : ObjectId("5d97084e33db68bbc64663fc"),
        "title" : "A Book",
        "description" : "This is an awesome book about a young artist!",
        "score" : 0.625
}


> db.products.find({$text: {$search: "awesome t-shirt"}}, {score: {$meta: "textScore"}}).sort({score: {$meta: "textScore"}}).pretty()
{
        "_id" : ObjectId("5d97084e33db68bbc64663fd"),
        "title" : "Red T-Shirt",
        "description" : "This T-Shirt is red and it's pretty awesome!",
        "score" : 1.7999999999999998
}
{
        "_id" : ObjectId("5d97084e33db68bbc64663fc"),
        "title" : "A Book",
        "description" : "This is an awesome book about a young artist!",
        "score" : 0.625
}


============================
Creating Combined Text Indexes
============================
> db.products.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "contactData.products"
        },
        {
                "v" : 2,
                "key" : {
                        "_fts" : "text",
                        "_ftsx" : 1
                },
                "name" : "description_text",
                "ns" : "contactData.products",
                "weights" : {
                        "description" : 1
                },
                "default_language" : "english",
                "language_override" : "language",
                "textIndexVersion" : 3
        }
]


> db.products.findOne()
{
        "_id" : ObjectId("5d97084e33db68bbc64663fc"),
        "title" : "A Book",
        "description" : "This is an awesome book about a young artist!"
}


*** can't create two text index in one collection
> db.products.createIndex({title: "text"})
{
        "ok" : 0,
        "errmsg" : "Index: { v: 2, key: { _fts: \"text\", _ftsx: 1 }, name: \"title_text\", ns: \"contactData.products\", weights: { title: 1 }, default_language: \"english\", language_override: \"language\", textIndexVersion: 3 } already exists with different options: { v: 2, key: { _fts: \"text\", _ftsx: 1 }, name: \"description_text\", ns: \"contactData.products\", weights: { description: 1 }, default_language: \"english\", language_override: \"language\", textIndexVersion: 3 }",
        "code" : 85,
        "codeName" : "IndexOptionsConflict"
}


*** you can create combined text indexes for those cases where two fields are needed to text index
*** In here, firstly we dropped the created text index from previous lecture
*** you need to drop text index by the index name >>> if you don't know the index name, you can check the index name by using this command >>>
>>> db.products.getIndexes()

> db.products.dropIndex("description_text")
{ "nIndexesWas" : 2, "ok" : 1 }


*** now the text index we created in previous lecture is dropped
> db.products.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "contactData.products"
        }
]


*** now we can creat combined text index for two single fields
> db.products.createIndex({title: "text", description: "text"})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}


> db.products.insertOne({title: "A Ship", description: "Floats perfectly!"})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("5d97100133db68bbc64663fe")
}


> db.products.find({$text: {$search: "ship"}}).pretty()
{
        "_id" : ObjectId("5d97100133db68bbc64663fe"),
        "title" : "A Ship",
        "description" : "Floats perfectly!"
}


====================================
Using Text Indexes to Exclude Words
====================================
> db.products.find({$text: {$search: "awesome"}}).pretty()
{
        "_id" : ObjectId("5d97084e33db68bbc64663fc"),
        "title" : "A Book",
        "description" : "This is an awesome book about a young artist!"
}
{
        "_id" : ObjectId("5d97084e33db68bbc64663fd"),
        "title" : "Red T-Shirt",
        "description" : "This T-Shirt is red and it's pretty awesome!"
}


> db.products.find({$text: {$search: "awesome -t-shirt"}}).pretty()
{
        "_id" : ObjectId("5d97084e33db68bbc64663fc"),
        "title" : "A Book",
        "description" : "This is an awesome book about a young artist!"
}


=======================================
Setting the Default Language & Using Weights
=======================================
> db.products.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "contactData.products"
        },
        {
                "v" : 2,
                "key" : {
                        "_fts" : "text",
                        "_ftsx" : 1
                },
                "name" : "title_text_description_text",
                "ns" : "contactData.products",
                "weights" : {
                        "description" : 1,
                        "title" : 1
                },
                "default_language" : "english",
                "language_override" : "language",
                "textIndexVersion" : 3
        }
]


> db.products.dropIndex("title_text_description_text")
{ "nIndexesWas" : 2, "ok" : 1 }


> db.products.createIndex({title: "text", description: "text"}, {default_language: "english", weights: {title: 1, description: 10}})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}


> db.products.find().pretty()
{
        "_id" : ObjectId("5d97084e33db68bbc64663fc"),
        "title" : "A Book",
        "description" : "This is an awesome book about a young artist!"
}
{
        "_id" : ObjectId("5d97084e33db68bbc64663fd"),
        "title" : "Red T-Shirt",
        "description" : "This T-Shirt is red and it's pretty awesome!"
}
{
        "_id" : ObjectId("5d97100133db68bbc64663fe"),
        "title" : "A Ship",
        "description" : "Floats perfectly!"
}


> db.products.find({$text: {$search: "red"}}, {score: {$meta: "textScore"}}).pretty()
{
        "_id" : ObjectId("5d97084e33db68bbc64663fd"),
        "title" : "Red T-Shirt",
        "description" : "This T-Shirt is red and it's pretty awesome!",
        "score" : 6.666666666666667
}


> db.products.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "contactData.products"
        },
        {
                "v" : 2,
                "key" : {
                        "_fts" : "text",
                        "_ftsx" : 1
                },
                "name" : "title_text_description_text",
                "ns" : "contactData.products",
                "default_language" : "english",
                "weights" : {
                        "description" : 10,
                        "title" : 1
                },
                "language_override" : "language",
                "textIndexVersion" : 3
        }
]


> db.products.dropIndex("title_text_description_text")
{ "nIndexesWas" : 2, "ok" : 1 }


> db.products.createIndex({title: "text", description: "text"}, {default_language: "english"})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}


> db.products.find({$text: {$search: "red"}}, {score: {$meta: "textScore"}}).pretty()
{
        "_id" : ObjectId("5d97084e33db68bbc64663fd"),
        "title" : "Red T-Shirt",
        "description" : "This T-Shirt is red and it's pretty awesome!",
        "score" : 1.2666666666666666
}


=============================================
Building Indexes
=============================================
mongo credit-rating.js  (this will take a few minutes)


> show dbs
admin               0.000GB
boxOffice           0.000GB
boxoffice-extended  0.000GB
companyData         0.000GB
config              0.000GB
contactData         0.000GB
credit              0.032GB
financialData       0.000GB
local               0.000GB
movieData           0.000GB
user                0.000GB
> use credit
switched to db credit
> show collections
ratings
> db.ratings.count()
1000000


> db.ratings.findOne()
{
        "_id" : ObjectId("5d971677b9d9b5e3cc85da01"),
        "person_id" : 1,
        "score" : 18.00047069636164,
        "age" : 70
}
> db.ratings.createIndex({age: 1})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}


db.ratings.explain("executionStats").find({age: {$gt: 80}})


> db.ratings.dropIndex({age: 1})
{ "nIndexesWas" : 2, "ok" : 1 }


building index in background (which will not lock the collection, the collection don't need to wait creating index to finish)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
db.ratings.createIndex({age: 1}, {background: true})



